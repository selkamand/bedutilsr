usethis::use_package("funr")
usethis::use_package("utilitybelt")
usethis::package("vroom")
sapply(c("bedtoolsr", "assertthat", "vroom", "dplyr"), usethis::use_package)
usethis::use_pipe()
devtools::document()
devtools::load_all()
?bed_is_sorted
devtools::build()
devtools::check()
usethis::use_test("basicbedchecks")
ystem.file("testfiles/test_input/sorted.bed",package = "bedutilsr")
system.file("testfiles/test_input/sorted.bed",package = "bedutilsr")
system.file("testfiles/test_input/sorted.bed",package = "bedutilsr") %>% file.exists()
devtools::test()
devtools::test()
devtools::test()
system.file("testfiles/test_input/sorted.bed",package = "bedutilsr")
system.file("testfiles/test_input/sorted.bed",package = "bedutilsr") %>% file.exists()
system.file("testfiles/test_input/sorted.invalid_chromosomes.bed",package = "bedutilsr") %>% file.exists
system.file("testfiles/test_input/sorted.invalid_chromosomes.2.bed ",package = "bedutilsr") %>% file.exists
devtools::test()
devtools::test()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::load_all(
devtools::load_all()
devtools::load_all()
devtools::document
devtools::document()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::check()
devtools::build()
devtools::check()
usethis::use_package("rlang")
devtools::build()
devtools::check()
library(usethis); library(detoosl)
library(usethis); library(devtools)
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::check()
use_package("rlang")
devtools::check()
devtools::build()
devtools::check()
install.packages(bedr)
install.packages("bedr")
library(bedr)
vignette("bedr")
vignette("using-bedr")
vignette("Using-bedr")
?foverlap
??foverlap
bedr.merge.region(distance-1)
get.example.regions()
get.example.regions() %>% class()
check.binary(bedtools')
check.binary(bedtools)
check.binary("bedtools")
check.binary("tabix")
a <- check.binary("tabix")
a
file.path("tabix")
use_package("bedr")
devtools::document()
use_package(data.table)
use_package("data.table")
devtools::document()
devtools::load_all()
devtools::test()
devtools::document()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
check.binary(system.file("binaries", package = "bedutilsr"))
install.packages("withr")
install.packages("withr")
library(usethis); library(devtools)
use_package("withr")
devtools::load_all(
)
devtools::load_all()
assert_that_bedtools_binary_available()
assert_that_bedtools_binary_available()
assert_that_bedtools_binary_available(system.file("binaries", package = bedutilsr))
assert_that_bedtools_binary_available(system.file("binaries", package = "bedutilsr"))
test()
test()
unsorted_overlapping_intervals_bed = system.file("testfiles/test_input/unsorted_overlapping_intervals.bed",package = "bedutilsr")
bed_intervals_overlap(bedfile_path = unsorted_overlapping_intervals_bed, force_strandedness = FALSE, header = FALSE, warn = FALSE, cleanup_temp = TRUE)
test()
test()
test()
GLOBAL_BEDTOOLS_DIRECTORY
?bt.merge
test()
test()
load_all()
test()
test()
test()
test()
non_overlapping_intervals_with_header_bed = system.file("testfiles/test_input/non_overlapping_intervals_with_header.bed",package = "bedutilsr")
bed_intervals_overlap(non_overlapping_intervals_with_header_bed)
bed_intervals_overlap(non_overlapping_intervals_with_header_bed, cleanup_temp = FALSE)
bed_intervals_overlap(non_overlapping_intervals_with_header_bed, header=TRUE)
bed_intervals_overlap(non_overlapping_intervals_with_header_bed, header = TRUE, cleanup_temp = FALSE)
nrow(data.table::fread(file = "/var/folders/93/mb2bzm5j2v7625bbl3pnxb1h0000gp/T//Rtmp4pimzc/bedtest365b637b32a" , sep = "\t", select = 1, header = TRUE))
data.table::fread(file = "/var/folders/93/mb2bzm5j2v7625bbl3pnxb1h0000gp/T//Rtmp4pimzc/bedtest365b637b32a" , sep = "\t", select = 1, header = TRUE))
data.table::fread(file = "/var/folders/93/mb2bzm5j2v7625bbl3pnxb1h0000gp/T//Rtmp4pimzc/bedtest365b637b32a" , sep = "\t", select = 1, header = TRUE)
data.table::fread(file = "/var/folders/93/mb2bzm5j2v7625bbl3pnxb1h0000gp/T//Rtmp4pimzc/bedtest365b637b32a" , sep = "\t", header = TRUE)
data.table::fread(file = "/var/folders/93/mb2bzm5j2v7625bbl3pnxb1h0000gp/T//Rtmp4pimzc/bedtest365b637b32a" , sep = "\t")
data.table::fread(file = "/var/folders/93/mb2bzm5j2v7625bbl3pnxb1h0000gp/T//Rtmp4pimzc/bedtest365b637b32a" , sep = "\t", header = T)
test()
test()
test()
test()
test()
test()
test()
test()
test()
sink("/dev/null")
message("Hi")
print(2)
sink()
sink?
?sink
supressMessages
test()
test()
test()
hi <- function() {print("bob")}
is.expression(hi)
is.expression(hi())
is.expression({hi()})
eval(hi)
eval(hi())
eval(hi())
eval(hi)
eval(hi())
eval(hi)
eval(hi())
a=hi()
eval(hi())
a = {hi()}
test()
test()
test()
test()
test()
test()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
test()
test()
test()
test()
test()
devtools::build()
test()
sink()
sink()
test()
test()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
test()
test()
sink()
sink()
sink()
sink()
devtools::document()
devtools::load_all(
)
test()
test()
test()
test()
test()
test()
test()
(bed_intervals_overlap(bedfile_path = unsorted_overlapping_intervals_bed, force_strandedness = FALSE, header = FALSE, warn = FALSE, verbose = FALSE, cleanup_temp = TRUE))
(bed_intervals_overlap(bedfile_path = unsorted_overlapping_intervals_bed, force_strandedness = FALSE, header = FALSE, warn = FALSE, verbose = FALSE, cleanup_temp = TRUE)) %>% suppressWarnings()
(bed_intervals_overlap(bedfile_path = unsorted_overlapping_intervals_bed, force_strandedness = FALSE, header = FALSE, warn = FALSE, verbose = FALSE, cleanup_temp = TRUE)) %>% suppressMessages()
(bed_intervals_overlap(bedfile_path = unsorted_overlapping_intervals_bed, force_strandedness = FALSE, header = FALSE, warn = FALSE, verbose = FALSE, cleanup_temp = TRUE)) %>% suppressMessages()
suppressMessages((bed_intervals_overlap(bedfile_path = unsorted_overlapping_intervals_bed, force_strandedness = FALSE, header = FALSE, warn = FALSE, verbose = FALSE, cleanup_temp = TRUE)))
suppressMessages((bed_intervals_overlap(bedfile_path = unsorted_overlapping_intervals_bed, force_strandedness = FALSE, header = FALSE, warn = FALSE, verbose = FALSE, cleanup_temp = TRUE)))
load_all()
suppressMessages((bed_intervals_overlap(bedfile_path = unsorted_overlapping_intervals_bed, force_strandedness = FALSE, header = FALSE, warn = FALSE, verbose = FALSE, cleanup_temp = TRUE)))
suppressWarnings(classes="error", ((bed_intervals_overlap(bedfile_path = unsorted_overlapping_intervals_bed, force_strandedness = FALSE, header = FALSE, warn = FALSE, verbose = FALSE, cleanup_temp = TRUE)))
)
suppressWarnings(classes="error", ((bed_intervals_overlap(bedfile_path = unsorted_overlapping_intervals_bed, force_strandedness = FALSE, header = FALSE, warn = FALSE, verbose = FALSE, cleanup_temp = TRUE)))
)
devtools::build()
devtools::check()
ls
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::check()
document()
test()
check()
build()
check()
devtools::install_github("PhanstielLab/bedtoolsr", INSTALL_opts="--no-staged-install")
yes
R CMD INSTALL --staged-install
devtools::build(args =  c("--no-staged-install"))
devtools::build(args = c("--no-staged-install"))
build()
test()
check()
document()
build()
check()
build()
check()
check()
build()
check()
build()
check()
test()
test()
sink()
sink()
sink()
sink()
load_all()
test()
test()
sink()
sink()
test()
test()
build()
check()
edit_r_profile()
usethis::use_description()
usethis::use_description()
sapply("utilitybelt", "bedtoolsr", "assertthat", "dplyr", "rlang", "data.table", "bedr", "withr") ,usethis::use_package())
sapply(c("utilitybelt", "bedtoolsr", "assertthat", "dplyr", "rlang", "data.table", "bedr", "withr") ,usethis::use_package())
sapply(c("utilitybelt", "bedtoolsr", "assertthat", "dplyr", "rlang", "data.table", "bedr", "withr"),usethis::use_package)
library(usethis); library(devtools)
test()
build()
test()
check()
usethis::use_pipe()
check()
check()
usepackage("vroom")
use_package("vroom")
use_testthat(0
use_testthat()
use_mit_license()
edit_r_profile()
use_mit_license()
use_mit_license("Sam El-Kamand")
ls
check()
devtools::install_github("selkamand/bedutilsr")
usethis::use_test("randomly_shuffle_intervals")
devtools::document()
devtools::load()
devtools::load_all()
tempdir()
tempdir()
tempdir()
tempdir()
tempdir()
tempdir
tempdir()
tempdir()
tempdir(hello)
tempdir("hello")
tempdir("hello", "Friend")
expect_equal(n_files_produced, i)
test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
